knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
library(glmGamPoi)
library(UCell)
sample_name = 'Visium_FFPE_V43T08-041_D'
preprocessing_output_dir = './filtered_data/'
input_path = '../../../datashare/PDAC/visium_PDAC/'
path <- paste0(input_path, sample_name, '/outs/')
if(!file.exists(path)){
path <- paste0(input_path, sample_name, '/outs_old/')
}
if(file.exists(paste0(path, 'spatial/tissue_positions_list.csv'))){
file.remove(paste0(path, 'spatial/tissue_positions_list.csv'))
}
data <- Load10X_Spatial(data.dir = path, filename= 'filtered_feature_bc_matrix.h5')
plot1 <- VlnPlot(data, features = "nCount_Spatial", assay = "Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(data, features = "nCount_Spatial", pt.size.factor = 3) + theme(legend.position = "right")
wrap_plots(plot1, plot2)
lower_threshold = 0
upper_threshold = 50000
outlier_spot <- rownames(data@meta.data[data@meta.data$nCount_Spatial>upper_threshold | data@meta.data$nCount_Spatial<lower_threshold,])
SpatialDimPlot(data, cells.highlight = outlier_spot, facet.highlight = TRUE, ncol = 3, pt.size.factor = 3)
filtered_data <- subset(data, nCount_Spatial > lower_threshold & nCount_Spatial < upper_threshold)
plot1 <- VlnPlot(filtered_data, features = "nCount_Spatial", assay = "Spatial", pt.size = 0.1) + NoLegend()
plot2 <- SpatialFeaturePlot(filtered_data, features = "nCount_Spatial", pt.size.factor = 3) + theme(legend.position = "right")
wrap_plots(plot1, plot2)
options(future.globals.maxSize = 8000 * 1024^2)
normalized_data <- SCTransform(filtered_data, assay = "Spatial", verbose = FALSE)
SpatialFeaturePlot(normalized_data, features = c("TFF1", "SPRR3"), pt.size.factor = 3)
gene.sets <- list()
gene.sets$classical <- c("TFF1","TFF2","TFF3","CEACAM6", "LGALS4", "ST6GALNAC1", "PLA2G10","TSPAN8","LYZ","MYO1A", "VSIG2", "CLRN3", "CDH17", "AGR3", "AGR2", "BTNL8", "ANXA10", "FAM3D", "CTSE", "REG4")
gene.sets$basal <- c("SERPINB3", "SPRR3","SERPINB4", "VGLL1","DHRS9", "SPRR1B", "KRT17", "KRT15", "TNS4", "SCEL", "KRT6A", "KRT7", "CST6", "LY6D", "FAM83A", "AREG", "FGFBP1", "GPR87", "LEMD1","S100A2","SLC2A1")
ucell_obj <- AddModuleScore_UCell(normalized_data, features = gene.sets)
signature.names <- paste0(names(gene.sets), "_UCell")
map1 <- SpatialFeaturePlot(ucell_obj, features = signature.names[1], pt.size.factor = 3) +
scale_fill_gradientn(limits = c(0, 0.8), colors = c('blue',  'yellow', 'red'))
map2 <- SpatialFeaturePlot(ucell_obj, features = signature.names[2], pt.size.factor = 3) +
scale_fill_gradientn(limits = c(0, 0.8), colors = c('blue',  'yellow', 'red'))
wrap_plots(map1, map2)
loc <- read.csv(paste0(path,  '/spatial/tissue_positions.csv'))[,c('barcode', 'pxl_col_in_fullres', 'pxl_row_in_fullres')]
row.names(loc) <- loc$barcode
loc <- loc[,-1]
colnames(loc) <- c('x', 'y')
#removing of spots from loc but absent from count matrix
row_to_remove <- setdiff(rownames(loc), colnames(filtered_count))
filtered_count <- filtered_data@assays$Spatial$counts
write.csv(t(filtered_count), paste0(preprocessing_output_dir, sample_name, '_filtered.csv'), row.names = TRUE)
loc <- read.csv(paste0(path,  '/spatial/tissue_positions.csv'))[,c('barcode', 'pxl_col_in_fullres', 'pxl_row_in_fullres')]
row.names(loc) <- loc$barcode
loc <- loc[,-1]
colnames(loc) <- c('x', 'y')
#removing of spots from loc but absent from count matrix
row_to_remove <- setdiff(rownames(loc), colnames(filtered_count))
loc <- loc[!(rownames(loc) %in% row_to_remove),]
loc <- loc[order(rownames(loc)), ]
basal_Ucell_threshold = 0.25
classical_Ucell_threshold = 0.25
#obj from classical_basal_identification.Rmd
classical <- names(ucell_obj$classical_UCell[ucell_obj$classical_UCell > classical_Ucell_threshold])
basal <- names(ucell_obj$basal_UCell[ucell_obj$basal_UCell > basal_Ucell_threshold])
loc$label <- 'other' #Initialization
if(length(classical)>0){
loc[rownames(loc) %in% classical,]$label <- 'classical'}
if(length(basal)>0){
loc[rownames(loc) %in% basal,]$label <- 'basal'}
if(length(intersect(classical, basal))>0){
loc[rownames(loc) %in% intersect(classical, basal),]$label <- 'classical and basal'}
ucell_obj <- AddMetaData(ucell_obj, metadata = loc)
SpatialPlot(ucell_obj, group.by = "label", pt.size.factor = 3)+
theme(legend.text = element_text(size=14), legend.title = element_text(size=14))+
scale_fill_manual(values = c('basal'='red', 'classical'='yellow', 'classical and basal' = 'orange', 'other' = 'blue'))
